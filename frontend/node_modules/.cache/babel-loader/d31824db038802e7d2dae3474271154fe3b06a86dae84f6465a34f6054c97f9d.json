{"ast":null,"code":"var _jsxFileName = \"D:\\\\voting\\\\voting_app\\\\frontend\\\\src\\\\components\\\\GoogleSignIn.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst GoogleSignIn = ({\n  onSuccess,\n  onError,\n  loading,\n  buttonText = \"Continue with Google\"\n}) => {\n  _s();\n  const [googleReady, setGoogleReady] = useState(false);\n  const [hasValidClientId, setHasValidClientId] = useState(false);\n  useEffect(() => {\n    const clientId = process.env.REACT_APP_GOOGLE_CLIENT_ID;\n    console.log(\"Loaded Google Client ID:\", clientId); // DEBUG LOG\n    const isValidClientId = clientId && clientId !== \"your_google_client_id_here\" && clientId !== \"your-google-client-id\" && clientId.length > 10;\n    setHasValidClientId(isValidClientId);\n    if (!isValidClientId) return;\n\n    // Prevent loading the script multiple times\n    if (!document.querySelector('script[src=\"https://accounts.google.com/gsi/client\"]')) {\n      const script = document.createElement(\"script\");\n      script.src = \"https://accounts.google.com/gsi/client\";\n      script.async = true;\n      script.defer = true;\n      document.head.appendChild(script);\n      script.onload = () => {\n        if (window.google) {\n          try {\n            window.google.accounts.id.initialize({\n              client_id: clientId,\n              callback: handleCredentialResponse\n            });\n            setGoogleReady(true);\n          } catch (error) {\n            console.error(\"Google OAuth initialization error:\", error);\n            setGoogleReady(false);\n          }\n        }\n      };\n      script.onerror = () => {\n        console.error(\"Failed to load Google Identity Services\");\n        setGoogleReady(false);\n      };\n    } else {\n      // Script already loaded, just initialize\n      if (window.google) {\n        try {\n          window.google.accounts.id.initialize({\n            client_id: clientId,\n            callback: handleCredentialResponse\n          });\n          setGoogleReady(true);\n        } catch (error) {\n          console.error(\"Google OAuth initialization error:\", error);\n          setGoogleReady(false);\n        }\n      }\n    }\n    return () => {\n      // No need to remove the script, just cleanup if needed\n    };\n  }, []);\n  const handleCredentialResponse = async response => {\n    try {\n      // Decode the JWT token to get user info\n      const userInfo = parseJwt(response.credential);\n      const userData = {\n        credential: response.credential,\n        name: userInfo.name,\n        email: userInfo.email,\n        picture: userInfo.picture\n      };\n\n      // Send to backend\n      const backendResponse = await axios.post(\"/api/auth/google\", userData);\n      if (onSuccess) {\n        onSuccess(backendResponse.data);\n      }\n    } catch (error) {\n      console.error(\"Google sign-in error:\", error);\n      if (onError) {\n        var _error$response, _error$response$data;\n        onError(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || \"Google sign-in failed\");\n      }\n    }\n  };\n  const parseJwt = token => {\n    try {\n      const base64Url = token.split(\".\")[1];\n      const base64 = base64Url.replace(/-/g, \"+\").replace(/_/g, \"/\");\n      const jsonPayload = decodeURIComponent(atob(base64).split(\"\").map(function (c) {\n        return \"%\" + (\"00\" + c.charCodeAt(0).toString(16)).slice(-2);\n      }).join(\"\"));\n      return JSON.parse(jsonPayload);\n    } catch (error) {\n      console.error(\"Error parsing JWT:\", error);\n      return {};\n    }\n  };\n  const handleGoogleSignIn = () => {\n    if (hasValidClientId && googleReady && window.google) {\n      // Use real Google OAuth\n      try {\n        window.google.accounts.id.prompt();\n      } catch (error) {\n        console.error(\"Google sign-in prompt error:\", error);\n        handleDemoSignIn();\n      }\n    } else {\n      // Fallback to demo mode if Google SDK not loaded or no valid client ID\n      console.log(\"Using demo Google sign-in (no valid client ID configured)\");\n      handleDemoSignIn();\n    }\n  };\n  const handleDemoSignIn = async () => {\n    try {\n      const demoUserData = {\n        name: \"Demo Google User\",\n        email: \"demo@gmail.com\",\n        picture: \"https://via.placeholder.com/150\"\n      };\n      const response = await axios.post(\"/api/auth/google\", demoUserData);\n      if (onSuccess) {\n        onSuccess(response.data);\n      }\n    } catch (error) {\n      console.error(\"Demo Google sign-in error:\", error);\n      if (onError) {\n        var _error$response2, _error$response2$data;\n        onError(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || \"Demo Google sign-in failed\");\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: handleGoogleSignIn,\n    className: \"btn btn-outline btn-full\",\n    disabled: loading,\n    title: hasValidClientId ? \"Sign in with Google\" : \"Demo Google Sign-in (no client ID configured)\",\n    children: loading ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 11\n      }, this), \"Signing in with Google...\"]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fab fa-google\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 11\n      }, this), hasValidClientId ? buttonText : `${buttonText} (Demo)`]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 5\n  }, this);\n};\n_s(GoogleSignIn, \"/MgQWL7AVonZBmlDvpSFU8JVayo=\");\n_c = GoogleSignIn;\nexport default GoogleSignIn;\nvar _c;\n$RefreshReg$(_c, \"GoogleSignIn\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","GoogleSignIn","onSuccess","onError","loading","buttonText","_s","googleReady","setGoogleReady","hasValidClientId","setHasValidClientId","clientId","process","env","REACT_APP_GOOGLE_CLIENT_ID","console","log","isValidClientId","length","document","querySelector","script","createElement","src","async","defer","head","appendChild","onload","window","google","accounts","id","initialize","client_id","callback","handleCredentialResponse","error","onerror","response","userInfo","parseJwt","credential","userData","name","email","picture","backendResponse","post","data","_error$response","_error$response$data","message","token","base64Url","split","base64","replace","jsonPayload","decodeURIComponent","atob","map","c","charCodeAt","toString","slice","join","JSON","parse","handleGoogleSignIn","prompt","handleDemoSignIn","demoUserData","_error$response2","_error$response2$data","onClick","className","disabled","title","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/voting/voting_app/frontend/src/components/GoogleSignIn.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nconst GoogleSignIn = ({\n  onSuccess,\n  onError,\n  loading,\n  buttonText = \"Continue with Google\",\n}) => {\n  const [googleReady, setGoogleReady] = useState(false);\n  const [hasValidClientId, setHasValidClientId] = useState(false);\n\n  useEffect(() => {\n    const clientId = process.env.REACT_APP_GOOGLE_CLIENT_ID;\n    console.log(\"Loaded Google Client ID:\", clientId); // DEBUG LOG\n    const isValidClientId =\n      clientId &&\n      clientId !== \"your_google_client_id_here\" &&\n      clientId !== \"your-google-client-id\" &&\n      clientId.length > 10;\n    setHasValidClientId(isValidClientId);\n\n    if (!isValidClientId) return;\n\n    // Prevent loading the script multiple times\n    if (!document.querySelector('script[src=\"https://accounts.google.com/gsi/client\"]')) {\n      const script = document.createElement(\"script\");\n      script.src = \"https://accounts.google.com/gsi/client\";\n      script.async = true;\n      script.defer = true;\n      document.head.appendChild(script);\n      script.onload = () => {\n        if (window.google) {\n          try {\n            window.google.accounts.id.initialize({\n              client_id: clientId,\n              callback: handleCredentialResponse,\n            });\n            setGoogleReady(true);\n          } catch (error) {\n            console.error(\"Google OAuth initialization error:\", error);\n            setGoogleReady(false);\n          }\n        }\n      };\n      script.onerror = () => {\n        console.error(\"Failed to load Google Identity Services\");\n        setGoogleReady(false);\n      };\n    } else {\n      // Script already loaded, just initialize\n      if (window.google) {\n        try {\n          window.google.accounts.id.initialize({\n            client_id: clientId,\n            callback: handleCredentialResponse,\n          });\n          setGoogleReady(true);\n        } catch (error) {\n          console.error(\"Google OAuth initialization error:\", error);\n          setGoogleReady(false);\n        }\n      }\n    }\n\n    return () => {\n      // No need to remove the script, just cleanup if needed\n    };\n  }, []);\n\n  const handleCredentialResponse = async (response) => {\n    try {\n      // Decode the JWT token to get user info\n      const userInfo = parseJwt(response.credential);\n\n      const userData = {\n        credential: response.credential,\n        name: userInfo.name,\n        email: userInfo.email,\n        picture: userInfo.picture,\n      };\n\n      // Send to backend\n      const backendResponse = await axios.post(\"/api/auth/google\", userData);\n\n      if (onSuccess) {\n        onSuccess(backendResponse.data);\n      }\n    } catch (error) {\n      console.error(\"Google sign-in error:\", error);\n      if (onError) {\n        onError(error.response?.data?.message || \"Google sign-in failed\");\n      }\n    }\n  };\n\n  const parseJwt = (token) => {\n    try {\n      const base64Url = token.split(\".\")[1];\n      const base64 = base64Url.replace(/-/g, \"+\").replace(/_/g, \"/\");\n      const jsonPayload = decodeURIComponent(\n        atob(base64)\n          .split(\"\")\n          .map(function (c) {\n            return \"%\" + (\"00\" + c.charCodeAt(0).toString(16)).slice(-2);\n          })\n          .join(\"\")\n      );\n      return JSON.parse(jsonPayload);\n    } catch (error) {\n      console.error(\"Error parsing JWT:\", error);\n      return {};\n    }\n  };\n\n  const handleGoogleSignIn = () => {\n    if (hasValidClientId && googleReady && window.google) {\n      // Use real Google OAuth\n      try {\n        window.google.accounts.id.prompt();\n      } catch (error) {\n        console.error(\"Google sign-in prompt error:\", error);\n        handleDemoSignIn();\n      }\n    } else {\n      // Fallback to demo mode if Google SDK not loaded or no valid client ID\n      console.log(\"Using demo Google sign-in (no valid client ID configured)\");\n      handleDemoSignIn();\n    }\n  };\n\n  const handleDemoSignIn = async () => {\n    try {\n      const demoUserData = {\n        name: \"Demo Google User\",\n        email: \"demo@gmail.com\",\n        picture: \"https://via.placeholder.com/150\",\n      };\n\n      const response = await axios.post(\"/api/auth/google\", demoUserData);\n\n      if (onSuccess) {\n        onSuccess(response.data);\n      }\n    } catch (error) {\n      console.error(\"Demo Google sign-in error:\", error);\n      if (onError) {\n        onError(error.response?.data?.message || \"Demo Google sign-in failed\");\n      }\n    }\n  };\n\n  return (\n    <button\n      onClick={handleGoogleSignIn}\n      className=\"btn btn-outline btn-full\"\n      disabled={loading}\n      title={\n        hasValidClientId\n          ? \"Sign in with Google\"\n          : \"Demo Google Sign-in (no client ID configured)\"\n      }\n    >\n      {loading ? (\n        <>\n          <div className=\"spinner\"></div>\n          Signing in with Google...\n        </>\n      ) : (\n        <>\n          <i className=\"fab fa-google\"></i>\n          {hasValidClientId ? buttonText : `${buttonText} (Demo)`}\n        </>\n      )}\n    </button>\n  );\n};\n\nexport default GoogleSignIn;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}