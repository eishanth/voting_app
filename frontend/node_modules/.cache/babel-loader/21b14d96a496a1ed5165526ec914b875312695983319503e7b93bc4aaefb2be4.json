{"ast":null,"code":"var _jsxFileName = \"D:\\\\voting\\\\voting_app\\\\frontend\\\\src\\\\contexts\\\\ThemeContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useAuth } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext();\nexport const useTheme = () => {\n  _s();\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n_s(useTheme, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s2();\n  const {\n    user,\n    updateTheme\n  } = useAuth();\n  const [theme, setTheme] = useState(() => {\n    // Check localStorage first, then user preference, then default to light\n    const savedTheme = localStorage.getItem('theme');\n    return savedTheme || 'light';\n  });\n\n  // Update theme when user changes\n  useEffect(() => {\n    if (user && user.theme && user.theme !== theme) {\n      setTheme(user.theme);\n      localStorage.setItem('theme', user.theme);\n    }\n  }, [user, theme]);\n\n  // Apply theme to document\n  useEffect(() => {\n    document.documentElement.setAttribute('data-theme', theme);\n    localStorage.setItem('theme', theme);\n  }, [theme]);\n  const toggleTheme = async () => {\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n    setTheme(newTheme);\n    localStorage.setItem('theme', newTheme);\n\n    // Update user preference if logged in\n    if (user) {\n      await updateTheme(newTheme);\n    }\n  };\n  const value = {\n    theme,\n    toggleTheme,\n    isDark: theme === 'dark'\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s2(ThemeProvider, \"3tu5wLPtg148bivr75xzsKIjJU8=\", false, function () {\n  return [useAuth];\n});\n_c = ThemeProvider;\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useAuth","jsxDEV","_jsxDEV","ThemeContext","useTheme","_s","context","Error","ThemeProvider","children","_s2","user","updateTheme","theme","setTheme","savedTheme","localStorage","getItem","setItem","document","documentElement","setAttribute","toggleTheme","newTheme","value","isDark","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/voting/voting_app/frontend/src/contexts/ThemeContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useAuth } from './AuthContext';\n\nconst ThemeContext = createContext();\n\nexport const useTheme = () => {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n\nexport const ThemeProvider = ({ children }) => {\n  const { user, updateTheme } = useAuth();\n  const [theme, setTheme] = useState(() => {\n    // Check localStorage first, then user preference, then default to light\n    const savedTheme = localStorage.getItem('theme');\n    return savedTheme || 'light';\n  });\n\n  // Update theme when user changes\n  useEffect(() => {\n    if (user && user.theme && user.theme !== theme) {\n      setTheme(user.theme);\n      localStorage.setItem('theme', user.theme);\n    }\n  }, [user, theme]);\n\n  // Apply theme to document\n  useEffect(() => {\n    document.documentElement.setAttribute('data-theme', theme);\n    localStorage.setItem('theme', theme);\n  }, [theme]);\n\n  const toggleTheme = async () => {\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n    setTheme(newTheme);\n    localStorage.setItem('theme', newTheme);\n    \n    // Update user preference if logged in\n    if (user) {\n      await updateTheme(newTheme);\n    }\n  };\n\n  const value = {\n    theme,\n    toggleTheme,\n    isDark: theme === 'dark'\n  };\n\n  return (\n    <ThemeContext.Provider value={value}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC7E,SAASC,OAAO,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,YAAY,gBAAGP,aAAa,CAAC,CAAC;AAEpC,OAAO,MAAMQ,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAMC,OAAO,GAAGT,UAAU,CAACM,YAAY,CAAC;EACxC,IAAI,CAACG,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,8CAA8C,CAAC;EACjE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,QAAQ;AAQrB,OAAO,MAAMI,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC7C,MAAM;IAAEC,IAAI;IAAEC;EAAY,CAAC,GAAGZ,OAAO,CAAC,CAAC;EACvC,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,MAAM;IACvC;IACA,MAAMiB,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAChD,OAAOF,UAAU,IAAI,OAAO;EAC9B,CAAC,CAAC;;EAEF;EACAhB,SAAS,CAAC,MAAM;IACd,IAAIY,IAAI,IAAIA,IAAI,CAACE,KAAK,IAAIF,IAAI,CAACE,KAAK,KAAKA,KAAK,EAAE;MAC9CC,QAAQ,CAACH,IAAI,CAACE,KAAK,CAAC;MACpBG,YAAY,CAACE,OAAO,CAAC,OAAO,EAAEP,IAAI,CAACE,KAAK,CAAC;IAC3C;EACF,CAAC,EAAE,CAACF,IAAI,EAAEE,KAAK,CAAC,CAAC;;EAEjB;EACAd,SAAS,CAAC,MAAM;IACdoB,QAAQ,CAACC,eAAe,CAACC,YAAY,CAAC,YAAY,EAAER,KAAK,CAAC;IAC1DG,YAAY,CAACE,OAAO,CAAC,OAAO,EAAEL,KAAK,CAAC;EACtC,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EAEX,MAAMS,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,MAAMC,QAAQ,GAAGV,KAAK,KAAK,OAAO,GAAG,MAAM,GAAG,OAAO;IACrDC,QAAQ,CAACS,QAAQ,CAAC;IAClBP,YAAY,CAACE,OAAO,CAAC,OAAO,EAAEK,QAAQ,CAAC;;IAEvC;IACA,IAAIZ,IAAI,EAAE;MACR,MAAMC,WAAW,CAACW,QAAQ,CAAC;IAC7B;EACF,CAAC;EAED,MAAMC,KAAK,GAAG;IACZX,KAAK;IACLS,WAAW;IACXG,MAAM,EAAEZ,KAAK,KAAK;EACpB,CAAC;EAED,oBACEX,OAAA,CAACC,YAAY,CAACuB,QAAQ;IAACF,KAAK,EAAEA,KAAM;IAAAf,QAAA,EACjCA;EAAQ;IAAAkB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;AAACpB,GAAA,CA5CWF,aAAa;EAAA,QACMR,OAAO;AAAA;AAAA+B,EAAA,GAD1BvB,aAAa;AAAA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}